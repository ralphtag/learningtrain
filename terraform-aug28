WELCOME  FOR TERRAFORM

DAY1:  INSTALL THE TERRAFORM , GCP CLI SETUP , VSC 
DAY2: PROVIDER, CREATE INSTANCE -WINDOWS ,LINUX , defines variables in terraform,storage account, VPC,FIREWALL
DAY3: store remotely in GCS, parameters
DAY4: pipeline for the terraform and ansible  with github action

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE THE WINDOWS INSTANCE
INSTANCE NAME: YOUR-NAME-WINDOWS
REGION: CHOSE ACCORDINGLY
ZONE: CHOSE ACCORDINDGLY
MACHINE TYPE: E2


OS-STORAGE 
CHANGE TO WINDOWS SERVERS

DATA PROTECTION
nO BACKUP


NETWORKING

Allow HTTP traffic
Allow HTTPS traffic
Allow Load Balancer Health Checks


CREATE

and start the WINDOWS INSTANCES

CONNECTION TO THE GCP INSTANCE THROUGH RDP
------------------------------------------------------------------------------
Now click on RDP >>>>set windows password >>>>
change user name: yourname
copy the password and save somewhere it important 
------------------------------------------------------------------------------
click on the download the RDP FILE >>> IN DOWNLOAD >>> CLICK ON KEEP >>> OPEN THE FILE 
CLICK ON CONNECT >>>> click on MORE CHOICES >>> use a different user

add the username and password 

click on yes 

Congratulation your now successfully login to the REMOTE DESTOP OF YOUR GCP INSTANCE 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
INSTALLATION OF TERRAFORM FOR WINDOWS 

WEBSITE: https://developer.hashicorp.com/terraform/install


scroll down to windows 
select the 386 and download the file 
go to the c drive and there create the directory under terraform
paste the extracted file in the location c:/terraform

NEXT 

EDIT THE SYSTEM ENVIRONMENT VARIABLES

click on Environment Variables >>>> click on PATH >>>> EDIT  >>>> new>> THEN PASTE THIS    C:\terraform
SELECT OK> OK > OK

OPEN THE POWESHELL AS ADMINISTRATOR

and run this command 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Setting Up Terraform on Windows and GCP Authentication

website :  https://cloud.google.com/sdk/docs/install
click on windows 
copy and paste teh command 

the Google cloud CLI SET UP will get launch 
next >>> next > next >> till the task is finish   ( DNOT WORRY IT TAKES MINIMUM 30MINS TO COMPLETE)2

SELECT OPTION 3



-------------------------------------------------------------------------------------------------------------

DOWNLOAD VSC

https://code.visualstudio.com/
CLICK ON THE DOWNLOAD
click on windows and the again click on download the installation file get downloaded 

open the set-up file 
accept the agreement >>>>  NEXT >>>>> NEXT
CREATE THE directory/folder on desktop under name terra ( u can name it anything)
click on FILE >>> open folder terra >>> yes, i trust the authors 
create two files
1. sa.json
2. provider.tf

NOW INSTALL PLUGIN
HASHICORP TERRAFORM : SYNTAX HIGHLIGHTING



terraform --version

expected output 
terraform v1.13.0
on windows_386


for sandy :    https://etherpad.opendev.org/p/sandy


----------------------------------------------------------------------------------------------------------------------
official site: https://registry.terraform.io/

Block 

A block is the fundamental structural element in the Terraform language. It has a type, a label, and a body that contains arguments.
Common Types of Blocks:

    terraform {} - Configures Terraform itself (backend, required version).

    provider "google" {} - Configures the Google Cloud provider plugin.

    variable "instance_name" {} - Defines an input variable.

    output "public_ip" {} - Defines an output value.

    resource "google_compute_instance" "my_vm" {} - Defines a piece of infrastructure. This is a Resource Block.


A resource block is the most important and common type of block. It is used to define and manage a single piece of infrastructure, such as a virtual machine, a network, or a storage bucket.


example1=== refernce type

PROVIDER


#vim provider.tf

terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "6.48.0"
    }
  }
}

provider "google" { 
    project     = "rapid-burner-459905-a6" 
    region      = "us-central1" 
    zone        = "us-central1-a" 
    credentials = "C:/Users/inara/Desktop/terraform/terra.json"
}


STORAGE BUCKET (storage account )

resource "google_storage_bucket" "example1" { 
    name = "bucket-from-tf-shruti-taki"  #globally unique
    location = "US-CENTRAL1" 
}


==========================================================================================
TERRAFORM CODE TO CREATE THE LINUX-VM 

#Create a VPC network 
resource "google_compute_network" "my_network" { 
    name = "my-network" 
    auto_create_subnetworks = false 
}
#Create a subnet within the VPC network 
resource "google_compute_subnetwork" "my_subnet" {
     name = "my-subnet" 
     ip_cidr_range = "10.0.0.0/16" 
     network = google_compute_network.my_network.id 
     region = "us-central1" 
}
# Create a public IP address
 resource "google_compute_address" "my_public_ip" {
     name = "my-public-ip" 
     address_type = "EXTERNAL" 
     region = "us-central1" 
} 
# Create a network interface with an external IP 
resource "google_compute_instance" "my_instance" { 
    name = "my-instance-taki" 
    machine_type = "n2-standard-2" 
    zone = "us-central1-a" 
    boot_disk { 
        initialize_params { 
            image = "debian-cloud/debian-11" 
            labels = { 
                my_label = "edrt" 
            } 
        }
} 
network_interface { 
    network = google_compute_network.my_network.self_link 
    subnetwork = google_compute_subnetwork.my_subnet.self_link 
    access_config { 
        nat_ip = google_compute_address.my_public_ip.address 
    } 
  } 
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TERRAFORM CODE TO CREATE THE window-VM 
# Create a Windows instance
resource "google_compute_instance" "windows_vm" {
  name         = "windows-vm-shruti"
  machine_type = "e2-medium"  # 2 vCPUs, 4GB RAM
  zone         = "us-central1-a"

# Boot disk with Windows Server
  boot_disk {
    initialize_params {
      image = "projects/windows-cloud/global/images/family/windows-2019"  # Windows Server 2022
      size  = 50  # 50GB disk size
      type  = "pd-balanced"
    }
  }

  # Network interface
  network_interface {
    network = "default"

    # Assign external IP (ephemeral)
    access_config {
      // Ephemeral IP will be assigned automatically
    }
  }

  # Windows-specific configuration
  metadata = {
    windows-startup-script-ps1 = <<EOF
      # PowerShell startup script
      Write-Host "Windows instance is starting up!"
      # Add your custom startup commands here
    EOF
    enable-windows-ssh          = "TRUE"  # Enable SSH access for Windows
  }



  # Tags for firewall rules
  tags = ["http-server", "https-server", "rdp"]
}

# Allow RDP traffic (port 3389)
resource "google_compute_firewall" "allow_rdp" {
  name    = "allow-rdp"
  network = "default"

  allow {
    protocol = "tcp"
    ports    = ["3389"]
  }

  source_ranges = ["0.0.0.0/0"]  # Warning: This allows RDP from anywhere!
  target_tags   = ["rdp"]
}

# Allow HTTP traffic (optional)
resource "google_compute_firewall" "allow_http" {
  name    = "allow-http"
  network = "default"

  allow {
    protocol = "tcp"
    ports    = ["80"]
  }

  source_ranges = ["0.0.0.0/0"]
  target_tags   = ["http-server"]
}



https://developer.hashicorp.com/terraform/docs


https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/compute_instance
# Create a Windows instance
resource "google_compute_instance" "windows_vm" {
  name         = "windows-vm-shruti"
  machine_type = "e2-medium"  # 2 vCPUs, 4GB RAM
  zone         = "us-central1-a"

# Boot disk with Windows Server
  boot_disk {
    initialize_params {
      image = "projects/windows-cloud/global/images/family/windows-2019"  # Windows Server 2022
      size  = 50  # 50GB disk size
      type  = "pd-balanced"
    }
  }

  # Network interface
  network_interface {
    network = "default"

    # Assign external IP (ephemeral)
    access_config {
      // Ephemeral IP will be assigned automatically
    }
  }

  # Windows-specific configuration
  metadata = {
    windows-startup-script-ps1 = <<EOF
      # PowerShell startup script
      Write-Host "Windows instance is starting up!"
      # Add your custom startup commands here
    EOF
    enable-windows-ssh          = "TRUE"  # Enable SSH access for Windows
  }



  # Tags for firewall rules
  tags = ["http-server", "https-server", "rdp"]
}

# Allow RDP traffic (port 3389)
resource "google_compute_firewall" "allow_rdp" {
  name    = "allow-rdp"
  network = "default"

  allow {
    protocol = "tcp"
    ports    = ["3389"]
  }

  source_ranges = ["0.0.0.0/0"]  # Warning: This allows RDP from anywhere!
  target_tags   = ["rdp"]
}

# Allow HTTP traffic (optional)
resource "google_compute_firewall" "allow_http" {
  name    = "allow-http"
  network = "default"

  allow {
    protocol = "tcp"
    ports    = ["80"]
  }

  source_ranges = ["0.0.0.0/0"]
  target_tags   = ["http-server"]
}

#output block 

# Output the instance details
output "instance_ip" {
  value = google_compute_instance.windows_vm.network_interface[0].access_config[0].nat_ip
}

output "instance_name" {
  value = google_compute_instance.windows_vm.name
}

----------------------------------------------------------------
OUTPUT BLOCK FOR THE STORAGE BUCKET 


resource "google_storage_bucket" "example1" { 
    name = "bucket-from-tf-shruti-ini"  #globally unique
    location = "US-CENTRAL1" 
}


#do select/highlight the text ctrl+a ; then use ctrl+/ #to hash and unhash same command
#hash code will not get executed 


output "bucket_name" {
   description = " the name of the google bucket" 
   value = google_storage_bucket.example1.name

}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

LOADBALANCER
# VPC Network
resource "google_compute_network" "vpc_network" {
  name                    = "shruti-lb-network"
  auto_create_subnetworks = false
}

# Subnet
resource "google_compute_subnetwork" "subnet" {
  name          = "shruti-lb-subnet"
  ip_cidr_range = "10.0.1.0/24"
  region        = "us-central1"
  network       = google_compute_network.vpc_network.id
}

# Firewall Rule to Allow Health Checks
resource "google_compute_firewall" "allow_health_check" {
  name    = "shruti-allow-health-check"
  network = google_compute_network.vpc_network.name

  allow {
    protocol = "tcp"
    ports    = ["80"]
  }

  source_ranges = ["130.211.0.0/22", "35.191.0.0/16"] # GCP Health Check IP Ranges
  target_tags   = ["allow-health-check"]
}

# Instance Template for Backend Instances
resource "google_compute_instance_template" "instance_template" {
  name         = "shruti-lb-instance-template"
  machine_type = "e2-small"
  tags         = ["allow-health-check"] # Allows health checks

  disk {
    source_image = "debian-cloud/debian-12"
    auto_delete  = true
    boot         = true
  }

  network_interface {
    network    = google_compute_network.vpc_network.name
    subnetwork = google_compute_subnetwork.subnet.name
  }

  # Startup script to install Apache and serve a simple page
  metadata = {
    startup-script = <<-EOF
      #! /bin/bash
      apt-get update
      apt-get install -y apache2
      echo "Hello from backend instance $(hostname)" > /var/www/html/index.html
      systemctl restart apache2
    EOF
  }
}

# Managed Instance Group (MIG)
resource "google_compute_instance_group_manager" "mig" {
  name               = "shruti-lb-mig"
  base_instance_name = "vm"
  zone               = "us-central1-b"
  target_size        = 2

  version {
    instance_template = google_compute_instance_template.instance_template.id
  }

  named_port {
    name = "http"
    port = 80
  }
}

# Health Check
resource "google_compute_health_check" "health_check" {
  name               = "lb-health-check"
  check_interval_sec = 5
  timeout_sec        = 5
  healthy_threshold   = 2
  unhealthy_threshold = 3

  http_health_check {
    port         = 80
    request_path = "/"
  }
}

# Backend Service
resource "google_compute_backend_service" "backend_service" {
  name          = "lb-backend-service"
  protocol      = "HTTP"
  port_name     = "http"
  timeout_sec   = 10
  health_checks = [google_compute_health_check.health_check.id]

  backend {
    group           = google_compute_instance_group_manager.mig.instance_group
    balancing_mode  = "UTILIZATION"
    capacity_scaler = 1.0
  }
}

# URL Map (Routes all traffic to the backend service)
resource "google_compute_url_map" "url_map" {
  name            = "lb-url-map"
  default_service = google_compute_backend_service.backend_service.id
}

# Target HTTP Proxy
resource "google_compute_target_http_proxy" "http_proxy" {
  name    = "lb-http-proxy"
  url_map = google_compute_url_map.url_map.id
}

# Global Forwarding Rule
resource "google_compute_global_forwarding_rule" "forwarding_rule" {
  name                  = "shruti-lb-forwarding-rule"
  target                = google_compute_target_http_proxy.http_proxy.id
  port_range            = "80"
  ip_protocol           = "TCP"
  load_balancing_scheme = "EXTERNAL"
}

# Output the Load Balancer IP
output "load_balancer_ip" {
  value = google_compute_global_forwarding_rule.forwarding_rule.ip_address
}

====================================================================================================================
DAY9

MULTIPLE CHOICE QUESTION : QUBIT:     https://www.qubits42.com/live/52926

Variables

Approach 1 ( create anyname.tf)


vim first.tf ( u can give any name and extension should be .tf)


variable "credentials_file" {
  default = "C:/Users/inara/Desktop/terraform/terra.json"
  type        = string
}

variable "project_id" {
  default = "rapid-burner-459905-a6"
  type        = string
}

variable "region" {
  default     = "us-central1"
  type        = string
 
}

variable "zone" {
  default     = "us-central1-a"
  type        = string
}




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


#vim loadbalncer 



# VPC Network
resource "google_compute_network" "vpc_network" {
  name                    = "lb-network"
  auto_create_subnetworks = false
}

# Subnet
resource "google_compute_subnetwork" "subnet" {
  name          = "lb-subnet"
  ip_cidr_range = "10.0.1.0/24"
  region        = var.region
  network       = google_compute_network.vpc_network.id
}

# Firewall Rule to Allow Health Checks
resource "google_compute_firewall" "allow_health_check" {
  name    = "allow-health-check"
  network = google_compute_network.vpc_network.name

  allow {
    protocol = "tcp"
    ports    = ["80"]
  }

  source_ranges = ["130.211.0.0/22", "35.191.0.0/16"] # GCP Health Check IP Ranges
  target_tags   = ["allow-health-check"]
}

# Instance Template for Backend Instances
resource "google_compute_instance_template" "instance_template" {
  name         = "lb-instance-template"
  machine_type = "e2-small"
  tags         = ["allow-health-check"] # Allows health checks

  disk {
    source_image = "debian-cloud/debian-12"
    auto_delete  = true
    boot         = true
  }

  network_interface {
    network    = google_compute_network.vpc_network.name
    subnetwork = google_compute_subnetwork.subnet.name
  }

  # Startup script to install Apache and serve a simple page
  metadata = {
    startup-script = <<-EOF
      #! /bin/bash
      apt-get update
      apt-get install -y apache2
      echo "Hello from backend instance $(hostname)" > /var/www/html/index.html
      systemctl restart apache2
    EOF
  }
}

# Managed Instance Group (MIG)
resource "google_compute_instance_group_manager" "mig" {
  name               = "lb-mig"
  base_instance_name = "vm"
  zone               = var.zone
  target_size        = 2

  version {
    instance_template = google_compute_instance_template.instance_template.id
  }

  named_port {
    name = "http"
    port = 80
  }
}

# Health Check
resource "google_compute_health_check" "health_check" {
  name               = "lb-health-check"
  check_interval_sec = 5
  timeout_sec        = 5
  healthy_threshold   = 2
  unhealthy_threshold = 3

  http_health_check {
    port         = 80
    request_path = "/"
  }
}

# Backend Service
resource "google_compute_backend_service" "backend_service" {
  name          = "lb-backend-service"
  protocol      = "HTTP"
  port_name     = "http"
  timeout_sec   = 10
  health_checks = [google_compute_health_check.health_check.id]

  backend {
    group           = google_compute_instance_group_manager.mig.instance_group
    balancing_mode  = "UTILIZATION"
    capacity_scaler = 1.0
  }
}

# URL Map (Routes all traffic to the backend service)
resource "google_compute_url_map" "url_map" {
  name            = "lb-url-map"
  default_service = google_compute_backend_service.backend_service.id
}

# Target HTTP Proxy
resource "google_compute_target_http_proxy" "http_proxy" {
  name    = "lb-http-proxy"
  url_map = google_compute_url_map.url_map.id
}

# Global Forwarding Rule
resource "google_compute_global_forwarding_rule" "forwarding_rule" {
  name                  = "lb-forwarding-rule"
  target                = google_compute_target_http_proxy.http_proxy.id
  port_range            = "80"
  ip_protocol           = "TCP"
  load_balancing_scheme = "EXTERNAL"
}

# Output the Load Balancer IP
output "load_balancer_ip" {
  value = google_compute_global_forwarding_rule.forwarding_rule.ip_address
}


-------------------------------------------------------------------------------------------------------------------
==================================================================================================================
 apporach2: we have created   var.tf

#var.tf

variable "credentials_file" {
  default = "C:/Users/inara/Desktop/terraform/terra.json"
  type        = string
}

variable "project_id" {
  default = "rapid-burner-459905-a6"
  type        = string
}

variable "region" {
  default     = "europe-west1"
  type        = string
 
}

variable "zone" {
  default     = "europe-west1-d"
  type        = string
}


--------------------------------------------------------------------
 apporach 3: FROM USER INPUT
#vim vars.tf

variable "region" {
  description = "enter the location"
  type        = string
 
}

#vim storagebucket.tf

resource "google_storage_bucket" "example3" { 
    name = "bucket-from-tf-shruti-ini2345"  #globally unique
    location =  var.region
}



---------------------------------------------------------------------------------------------

Example 4: (Approach 4) variables in terraform.tfvars

Note: terraform.tfvars/terraform.tfvars.json/*.auto.tfvars/*.auto.tfvars.json (all allowed)


#vim terraform.tfvars


variable "region" {
  description = "enter the location"
  type        = string
 
}

resource "google_storage_bucket" "example3" { 
    name = "bucket-from-tf-shruti-ini2345"  #globally unique
    location =  var.region
}
--------------------------------------------------------------------------------------------------------------------------------
Example 5: (Approach 5) use anyfilename.tfvars
i.e. test.tfvars


Example 6: passing value from cmd

terraform plan  -var="region=us-central1"  --auto-approve
terraform apply  -var="region=us-central1"  --auto-approve


Example 7: edit the system environment variable (Highest Priority)
TF_VAR_var_name=var_value
i.e.
TF_VAR_rg_name=my-rg1
TF_VAR_rg_location=westus

priority:
    1- env var
    2- cmd line
    3- terraform.tfvars
    4- variables in file
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


DATA TYPE

1.        STRING
2.        NUMBER
3.        LIST
4.        map
5.        set


1.        Data-type ( string)  as variable to create the vm-instance


variable "vm_name" {
  type        = string
  description = "Name of the VM instance"
  default     = "demovm"      # optional default
}

# Create a tiny VM whose name comes from the string variable
resource "google_compute_instance" "demo1" {
  name         = var.vm_name          # <-- string used here
  machine_type = "e2-micro"
  zone         = "us-central1-a"

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-11"
    }
  }

  network_interface {
    network = "default"
    access_config {}  # ephemeral external IP
  }

  labels = {
    name_tag = var.vm_name
  }
}

output "instance_name" {
  value = google_compute_instance.demo1.name
}

output "external_ip" {
  value = google_compute_instance.demo1.network_interface[0].access_config[0].nat_ip
}

================================================================================================================
2. Data-type ( number)  as variable to create the vm-instance

variable "disk_size_gb" {
  type        = number
  description = "Size of the boot disk in gibibytes (GiB)"
  default     = 60         # optional – can be overridden
}



# A tiny VM just to show the datatype in variables  in action
resource "google_compute_instance" "demo" {
  name         = "tf-number-demo"
  machine_type = "e2-micro"
  zone         = "us-central1-a"

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-11"
      size  = var.disk_size_gb   # <-- number used here
    }
  }

  network_interface {
    network = "default"
    access_config {
      # ephemeral external IP
    }
  }

  labels = {
    disk_size = tostring(var.disk_size_gb)   # labels must be strings
  }
}

output "vm_external_ip" {
  value = google_compute_instance.demo.network_interface[0].access_config[0].nat_ip
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Data-type ( list)  as variable to create the ip addresses

variable "pip" {
  type    = list(any)
  default = ["shruti-ip-address1", "shruti-ip-address2", "shruti-ip-address3"]
}

resource "google_compute_address" "my_public_ip" {
  name         = var.pip[count.index]
  address_type = "EXTERNAL"
  region       = "us-central1"
  count        = 3
}

output "all_ip_addresses" {
  description = "List of all reserved public IP addresses"
  value       = google_compute_address.my_public_ip[*].address
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------

4. Data-type ( MAP)  as variable to create the ip addresses



variable "labels_map" {
  type        = map(string)
  description = "Key-value labels to apply to the VM"
  default = {
    owner   = "demo-shruti"
    purpose = "learning"
    env =   "dev"
  }
}

resource "google_compute_instance" "demo2" {
  name         = "map-demo2-vm"
  machine_type = "e2-micro"
  zone         = "us-central1-a"

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-11"
    }
  }

  network_interface {
    network = "default"
    access_config {}  # ephemeral external IP
  }

  labels = var.labels_map    # <-- entire map applied here
}

output "instance_labels" {
  value = google_compute_instance.demo2.labels
}

=============================================================================



---------------------------------------------------------------------------------
5. Data-type ( set)  as variable to create the ip addresses


variable "target_tags" {
  type        = set(string)
  description = "Network tags applied to the VM (duplicates automatically removed)"
  default     = ["http", "ssh"]
}
resource "google_compute_instance" "demo3" {
  name         = "set-demo3-vm"
  machine_type = "e2-micro"
  zone         = "us-central1-a"

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-11"
    }
  }

  network_interface {
    network = "default"
    access_config {}  # ephemeral external IP
  }

  tags = var.target_tags   # <-- set applied here (duplicates removed)
}

# Optional: show the final set
output "applied_tags" {
  value = google_compute_instance.demo3.tags
}

====================================================================================================


BACKEND REMOTE STATE MANAGEMENT


THROUGH GRAPHICAL MODE IN  GCS CREATE THE STORAGE BUCKET


terraform {
  backend "gcs" {
    bucket = "bucket1witheng"   # same name you created above
    prefix = "terraform/state"
    credentials = "terra.json"
                            
  }
}


